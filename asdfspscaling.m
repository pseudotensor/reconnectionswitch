(* ::Package:: *)

(* ::Input:: *)
(* AutoGeneratedPackage->Button[Automatic, Inherited, BaseStyle -> "Link", ButtonData -> "paclet:ref/Automatic"]*)


(* ::Input:: *)
(*InitializationCell->True*)


(* ::Input:: *)
(*ExpressionCell[Defer[a=2+2],"Input",]*)


(* ::Input:: *)
(*(* To run on command line, do:*)
(**)
(*math.exe -run spscaling.nb*)
(**)
(**)*)
(*(**)
(**)
(*mathematica.exe -cleanStart -nogui -noSplashScreen*)
(**)
(**)*)


(* ::Input:: *)
(*(* Setup SP functions *)*)
(*getspnote=Module[*)
(*{foo},*)
(*nb3=NotebookOpen["C:\\Users\\jon\\Documents\\Super Documents\\math\\private\\gamma_jet_sweet_parker.nb"];*)
(*SelectionMove[nb3,All,Notebook];*)
(*SelectionEvaluate[nb3];*)
(*];*)


(* ::Input:: *)
(*getconstants:=Module[*)
(*{foo},*)
(*c=1; (* sets units *)*)
(*];*)


(* ::Input:: *)
(*setupscalesolution:=Module[*)
(*{foo},*)
(*dodebugprint=1;*)
(*(* unused choice physics *)*)
(*ievalue=0.0;*)
(*pvalue=0.0;*)
(*(* choice physics *)*)
(*(*mysigma=10^(-5);*)
(*myS=10^2;*)
(**)*)
(*sigmalow=10^(-10);*)
(*sigmahigh=10^(10);*)
(*Slow=10^2;*)
(*Shigh=10^(15);*)
(*numsigma=100;*)
(*numS=100;*)
(*lmysigmalow=Log[10,sigmalow];*)
(*lmysigmahigh=Log[10,sigmahigh];*)
(*dlmysigma=(lmysigmahigh-lmysigmalow)/(numsigma-1);*)
(*lmySlow=Log[10,Slow];*)
(*lmyShigh=Log[10,Shigh];*)
(*dlmyS=(lmyShigh-lmySlow)/(numS-1);*)
(**)
(*prefix="spdata";*)
(*myfile=StringJoin[prefix,"_",ToString[CForm[N[numsigma,4]]],"_",ToString[CForm[N[numS,4]]],"_",ToString[CForm[N[sigmalow,4]]],"_",ToString[CForm[N[sigmahigh,4]]],"_",*)
(*ToString[CForm[N[Slow,4]]],"_",ToString[CForm[N[Shigh,4]]],".dat"];*)
(*(* Setup output text wrapper *)*)
(*myO[var_]:=(CForm[N[var]])//.{Overflow[]->"1E+300",Underflow[]->"1E-300"};*)
(*];*)


(* ::Input:: *)
(*getscalesolution:=Module[*)
(*{foo},*)
(*c=1; (* sets units *)*)
(*rhobvalue=1.0; (* sets units *)*)
(*Lpnum=1.0; (* sets units *)*)
(**)
(*(* NOTchoice physics *)*)
(*UginfixedT=ievalue;*)
(*(* sigma = b^2/(8pi) / (rho0 c^2) *)*)
(*bgauss=Sqrt[8*Pi*mysigma*rhobvalue*c^2];*)
(*vaold=c*bgauss/Sqrt[1*4*Pi*(rhobvalue*c^2+ievalue+pvalue+bgauss^2/(4*Pi))];*)
(*soleta=Solve[myS==1.0*Lpnum*vaold/eta,eta];*)
(*etatotal=soleta[[1,1,2]];*)
(**)
(*solvespfullall;*)
(*nonrelsol=Table[SetPrecision[mysol[[ii,2]],10],{ii,1,8}];*)
(*relsol=Table[SetPrecision[fsolsspotherunits[[ii,2]],10],{ii,1,8}];*)
(*rat=Table[relsol[[ii]]/nonrelsol[[ii]],{ii,1,8}];*)
(*];*)
(**)


(* ::Input:: *)
(*(* Write stuff*)*)
(*WriteStuff[ii0_,jj0_]:=Module[*)
(*{foo,whichi,ii=ii0,jj=jj0},*)
(*(*Print["WriteStrings"];*)*)
(*WriteString[outputstrm,myO[ii]];WriteString[outputstrm," "];*)
(*WriteString[outputstrm,myO[jj]];WriteString[outputstrm," "];*)
(*WriteString[outputstrm,myO[mysigma]];WriteString[outputstrm," "];*)
(*WriteString[outputstrm,myO[myS]];WriteString[outputstrm," "];*)
(*For[whichi=1,whichi<=8,whichi++,WriteString[outputstrm,myO[nonrelsol[[whichi]]]];WriteString[outputstrm," "]];*)
(*For[whichi=1,whichi<=8,whichi++,WriteString[outputstrm,myO[relsol[[whichi]]]];WriteString[outputstrm," "]];*)
(*For[whichi=1,whichi<=8,whichi++,WriteString[outputstrm,myO[rat[[whichi]]]];WriteString[outputstrm," "]];*)
(*];*)


(* ::Input:: *)
(*outputstrm==$Failed*)


(* ::Input:: *)
(*outputstrmstandard=OpenWrite["stdout.dat"];*)
(*Streams["stdout"]=outputstrmstandard;*)


(* ::Input:: *)
(*Close[outputstrmstandard];*)


(* ::Input:: *)
(**)


(* ::Input:: *)
(*Streams[]*)


(* ::Input:: *)
(*CloseAllFiles;*)


(* ::Input:: *)
(*doallscalingplot:=Module[*)
(*{foo,ii,jj},*)
(*setupscalesolution;*)
(*(* DO LOOP *)*)
(*CloseAllFiles;*)
(*outputstrm=OpenWrite[myfile];*)
(*Print["Start loop"];*)
(*For[ii=1,ii<=numsigma,ii++,*)
(*mysigma=10.0^((ii-1)*dlmysigma+lmysigmalow);*)
(*For[jj=1,jj<=numS,jj++,*)
(*Print["Begin:",ii," ",jj];*)
(*myS=10.0^((jj-1)*dlmyS+lmySlow);*)
(*Print[mysigma," ",myS];*)
(*getscalesolution;*)
(*WriteStuff[ii,jj];*)
(*WriteString[outputstrm,"\n"];*)
(*Print["End:",ii," ",jj];*)
(*];*)
(*];*)
(*Close[myfile];*)
(*];*)


(* ::Input:: *)
(*CloseAllFiles:=Module[*)
(*{foo,ii},*)
(*mystreams=Streams[];*)
(*For[ii=3,ii<=Dimensions[mystreams][[1]],ii++,*)
(*Print["Closing",mystreams[[ii]]];*)
(*Close[mystreams[[ii]]];*)
(*];*)
(*];*)
(**)


(* ::Input:: *)
(*(* DO ONE *)*)
(*doonescaling:=Module[*)
(*{foo},*)
(*setupscalesolution;*)
(*mysigma=1000000000 10^(19/99);*)
(*myS=100000000 10^(23/33);*)
(*getscalesolution;*)
(*];*)


(* ::Input:: *)
(*(* (* DO MANY *)*)
(*doallscalingplot;*)
(**)*)
