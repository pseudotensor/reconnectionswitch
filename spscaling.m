(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* AppendTo[$Echo,"stdout"]; *)
(*
(* select all cells and cell->cell properties->initialization cell *)
(* copy as plain text *)
math.exe -run doallscalingplot < "d:\Super Documents\math\private\spscaling.m"

see: spscaling_wrapper.nb

OR:
math.exe
<<"C:\\Users\\jon\\Documents\\Super Documents\\math\\private\\gamma_jet_sweet_parker.m"
<<"d:\\Super Documents\\math\\private\\spscaling.m"
*)


 AutoGeneratedPackage->Button[Automatic, Inherited, BaseStyle -> "Link", ButtonData -> "paclet:ref/Automatic"]


InitializationCell->True


(* IF ADD NEW CELLS, MUST MAKE THEM INITIALZATION CELL BY GOING TO CELL->CELL PROPERTIES->INITIALZATION CELL *)


(* Setup SP functions - only needed if using front end *)
getspnote=Module[
{foo},
nb3=NotebookOpen["C:\\Users\\jon\\Documents\\Super Documents\\math\\private\\gamma_jet_sweet_parker.nb"];
SelectionMove[nb3,All,Notebook];
SelectionEvaluate[nb3];
];


getconstants:=Module[
{foo},
c=1; (* sets units *)
];


setupscalesolution:=Module[
{foo},
dodebugprint=1;
numunknowns=10;
(* unused choice physics *)
ievalue=0.0;
pvalue=0.0;

(*myAfactor=1.0;*)
myAfactor=1/100000000;


singlesigma=1;
(* exactly 0 sigma not allowed since field is exactly zero then *)
singlesigmavalue=10^(8);
numsigma=150;
sigmalow=10^(-10);
sigmahigh=10^(15);
lmysigmalow=Log[10,sigmalow];
lmysigmahigh=Log[10,sigmahigh];
If[(numsigma-1)==0,dlmysigma=0;,dlmysigma=(lmysigmahigh-lmysigmalow)/(numsigma-1);];

singleS=1;
singleSvalue=10^(10);
numS=150;
Slow=10^1;
Shigh=10^(25);
lmySlow=Log[10,Slow];
lmyShigh=Log[10,Shigh];
If[(numS-1)==0,dlmyS==0;,dlmyS=(lmyShigh-lmySlow)/(numS-1);];

(* controls if use log or single value *)
singleguidefactor=1;
singleguidefactorvalue=0;
numguidefactor=9;
guidefactorlow=10^(-4);
guidefactorhigh=10^4;
lmyguidefactorlow=Log[10,guidefactorlow];
lmyguidefactorhigh=Log[10,guidefactorhigh];
If[(numguidefactor-1)==0,dlmyguidefactor=0;,dlmyguidefactor=(lmyguidefactorhigh-lmyguidefactorlow)/(numguidefactor-1);];

singleeff2=1;
(*singleeff2value=1-10^(-16);*)
(* restriction to non-zero values NOT just due to using NSolve with purely non-rel equations, since tried solving using FindRoot and gets solution but with negative density *)
singleeff2value=1-10^(-16);
numeff2=100;
eff2low=10^(-7);
eff2high=1-10^(-16);
lmyeff2low=Log[10,eff2low];
lmyeff2high=Log[10,eff2high];
If[(numeff2-1)==0,dlmyeff2=0;,dlmyeff2=(lmyeff2high-lmyeff2low)/(numeff2-1);];



If[singlesigma==1,
startii=1;endii=1;,
startii=1;endii=numsigma;
];
If[singleS==1,
startjj=1;endjj=1;,
startjj=1;endjj=numS;
];

If[singleguidefactor==1,
startkk=1;endkk=1;,
startkk=1;endkk=numguidefactor;
];
If[singleeff2==1,
startll=1;endll=1;,
startll=1;endll=numeff2;
];

(*
(* test or fixup *)
startii=1;
endii=1;
startjj=1;
endjj=1;
startkk=1;
endkk=1;
startll=1;
endll=1;
*)


prefix="spdata";
If[singlesigma==1,
myfile=StringJoin[prefix,"_nums1v_",ToString[CForm[N[1,4]]]];,
myfile=StringJoin[prefix,"_nums_",ToString[CForm[N[numsigma,4]]]];
];
If[singleS==1,
myfile=StringJoin[myfile,"_numS1v_",ToString[CForm[N[1,4]]]];,
myfile=StringJoin[myfile,"_numS_",ToString[CForm[N[numS,4]]]];
];
If[singleguidefactor==1,
myfile=StringJoin[myfile,"_numgf1v_",ToString[CForm[N[1,4]]]];,
myfile=StringJoin[myfile,"_numgf_",ToString[CForm[N[numguidefactor,4]]]];
];
If[singleeff2==1,
myfile=StringJoin[myfile,"_numeff21f_",ToString[CForm[N[1,4]]]];,
myfile=StringJoin[myfile,"_numeff2_",ToString[CForm[N[numeff2,4]]]];
];
myfile=StringJoin[myfile,"_startii_",ToString[CForm[startii]],"_endii_",ToString[CForm[endii]]];
myfile=StringJoin[myfile,"_startjj_",ToString[CForm[startjj]],"_endjj_",ToString[CForm[endjj]]];
myfile=StringJoin[myfile,"_startkk_",ToString[CForm[startkk]],"_endkk_",ToString[CForm[endkk]]];
myfile=StringJoin[myfile,"_startll_",ToString[CForm[startll]],"_endll_",ToString[CForm[endll]]];
myfilesimple=myfile;
myfilesimple=StringJoin[myfilesimple,".dat"];
If[singlesigma==1,
myfile=StringJoin[myfile,"_slow_",ToString[CForm[N[singlesigmavalue,4]]],"_shigh_",ToString[CForm[N[singlesigmavalue,4]]]];,
myfile=StringJoin[myfile,"_slow_",ToString[CForm[N[sigmalow,4]]],"_shigh_",ToString[CForm[N[sigmahigh,4]]]];
];
If[singleS==1,
myfile=StringJoin[myfile,"_Slow_",ToString[CForm[N[singleSvalue,4]]],"_Shigh_",ToString[CForm[N[singleSvalue,4]]]];,
myfile=StringJoin[myfile,"_Slow_",ToString[CForm[N[Slow,4]]],"_Shigh_",ToString[CForm[N[Shigh,4]]]];
];
If[singleguidefactor==1,
myfile=StringJoin[myfile,"_gflow_",ToString[CForm[N[singleguidefactorvalue,4]]],"_gfhigh_",ToString[CForm[N[singleguidefactorvalue,4]]]];,
myfile=StringJoin[myfile,"_gflow_",ToString[CForm[N[guidefactorlow,4]]],"_gfhigh_",ToString[CForm[N[guidefactorhigh,4]]]];
];
If[singleeff2==1,
myfile=StringJoin[myfile,"_eff2low_",ToString[CForm[N[singleeff2value,4]]],"_eff2high_",ToString[CForm[N[singleeff2value,4]]]];,
myfile=StringJoin[myfile,"_eff2low_",ToString[CForm[N[eff2low,4]]],"_eff2high_",ToString[CForm[N[eff2high,4]]]];
];
myfile=StringJoin[myfile,".dat"];
(* Setup output text wrapper -- add 10^(-300) in case exactly zero in which case N[] is broken and doesn't convert *)
myO[var_]:=ToString[(PaddedForm[CForm[SetPrecision[N[var+10^(-300)],22]],{22,15}])//.{Overflow[]->"1E+300",Underflow[]->"1E-300"}];
(*myO[var_]:=(CForm[SetPrecision[N[var],22]]//.{Overflow[]->"1E+300",Underflow[]->"1E-300"});*)
];


(*
(1) ToString[PaddedForm[FortranForm[SetPrecision[num,15]],{6,5},NumberSigns->{"",""}]]

(2) ToString[PaddedForm[num,{17,10},ExponentFunction->(Null&)]]
*)


getscalesolution:=Module[
{foo,errorroot},
c=1; (* sets units *)
rhobvalue=1.0; (* sets units *)
Lpnum=1.0; (* sets units *)

(* NOTchoice physics *)
UginfixedT=ievalue;
(* sigma = b^2/(8pi) / (rho0 c^2) *)
bgauss=Sqrt[8*Pi*mysigma*rhobvalue*c^2];
vaold=c*bgauss/Sqrt[1*4*Pi*(rhobvalue*c^2+ievalue+pvalue+bgauss^2/(4*Pi))];
Clear[etatemp];
soleta=NSolve[myS==1.0*Lpnum*vaold/etatemp,etatemp,WorkingPrecision->450];
etatotal=soleta[[1,1,2]];

errorroot=solvespfullall[myeff2,myguidefactor,myAfactor];
nonrelsol=Table[SetPrecision[mysolnonrel[[ii,2]],10],{ii,1,numunknowns}];
mixedrelsol=Table[SetPrecision[mysolmixedrel[[ii,2]],10],{ii,1,numunknowns}];
relsol=Table[SetPrecision[fsolsspotherunits[[ii,2]],10],{ii,1,numunknowns}];
(*rat=Table[relsol[[ii]]/nonrelsol[[ii]],{ii,1,numunknowns}];*)
(* return error value *)
errorroot
];



(* Write stuff*)
WriteStuff[errorroot0_,ii0_,jj0_,kk0_,ll0_]:=Module[
{foo,errorroot=errorroot0,whichi,ii=ii0,jj=jj0,kk=kk0,ll=ll0},
(*Print["WriteStrings"];*)
WriteString[outputstrm,myO[ii]];WriteString[outputstrm," "];
WriteString[outputstrm,myO[jj]];WriteString[outputstrm," "];
WriteString[outputstrm,myO[kk]];WriteString[outputstrm," "];
WriteString[outputstrm,myO[ll]];WriteString[outputstrm," "];
WriteString[outputstrm,myO[mysigma]];WriteString[outputstrm," "];
WriteString[outputstrm,myO[myS]];WriteString[outputstrm," "];
WriteString[outputstrm,myO[guidefactor]];WriteString[outputstrm," "];
WriteString[outputstrm,myO[eff2]];WriteString[outputstrm," "];
WriteString[outputstrm,myO[errorroot]];WriteString[outputstrm," "];
WriteString[outputstrm,myO[numeffEMnonrel]];WriteString[outputstrm," "];
For[whichi=1,whichi<=numunknowns,whichi++,WriteString[outputstrm,myO[nonrelsol[[whichi]]]];WriteString[outputstrm," "]];
WriteString[outputstrm,myO[numeffEMmixedrel]];WriteString[outputstrm," "];
For[whichi=1,whichi<=numunknowns,whichi++,WriteString[outputstrm,myO[mixedrelsol[[whichi]]]];WriteString[outputstrm," "]];
WriteString[outputstrm,myO[numeffEMrel]];WriteString[outputstrm," "];
For[whichi=1,whichi<=numunknowns,whichi++,WriteString[outputstrm,myO[relsol[[whichi]]]];WriteString[outputstrm," "]];
Print["uxnonrel=",nonrelsol[[2]]];
Print["uxmixedrel=",mixedrelsol[[2]]];
Print["uxrel=",relsol[[2]]];
Print["rhocnonrel=",nonrelsol[[3]]];
Print["rhocmixedrel=",mixedrelsol[[3]]];
Print["rhocrel=",relsol[[3]]];
vaoldother=vaold//.{ux->nonrelsol[[2]]};
Print["uxnonrel/va=",nonrelsol[[2]]/vaoldother];
vaoldother=vaold//.{ux->mixedrelsol[[2]]};
Print["uxmixedrel/va=",mixedrelsol[[2]]/vaoldother];
vaoldother=vaold//.{ux->relsol[[2]]};
Print["uxrel/va=",relsol[[2]]/vaoldother];
];


(*outputstrm==$Failed*)


(*outputstrmstandard=OpenWrite["stdout.dat"];
Streams["stdout"]=outputstrmstandard;
*)


(*Close[outputstrmstandard];*)





(*Streams[]*)


(*CloseAllFiles;*)


doallscalingplot:=Module[
{foo,ii,jj,errorroot},
setupscalesolution;
(* DO LOOP *)
CloseAllFiles;
outputstrm=OpenWrite[myfile];
If[outputstrm==$Failed,myfile=myfilesimple;outputstrm=OpenWrite[myfile];];
Print["Start loop:","outputstrm:",outputstrm];
For[ll=startll,ll<=endll,ll++,
If[singleeff2==1,
myeff2=singleeff2value;ll=endll;,
myeff2=10.0^((ll-1)*dlmyeff2+lmyeff2low);
];
For[kk=startkk,kk<=endkk,kk++,
If[singleguidefactor==1,
myguidefactor=singleguidefactorvalue;kk=endkk;,
myguidefactor=10.0^((kk-1)*dlmyguidefactor+lmyguidefactorlow);
];
For[jj=startjj,jj<=endjj,jj++,
If[singleS==1,
myS=singleSvalue;jj=endjj;,
myS=10.0^((jj-1)*dlmyS+lmySlow);
];
For[ii=startii,ii<=endii,ii++,
If[singlesigma==1,
mysigma=singlesigmavalue;ii=endii;,
mysigma=10.0^((ii-1)*dlmysigma+lmysigmalow);
];
Print["Begin:",ii," ",jj," ",kk," ",ll];
Print["parms: ",mysigma," ",myS," ",myguidefactor," ",myeff2];
errorroot=getscalesolution;
WriteStuff[errorroot,ii,jj,kk,ll];
WriteString[outputstrm,"\n"];
Print["End:",ii," ",jj," ",kk," ",ll];
];
];
];
];
Close[myfile];
];


CloseAllFiles:=Module[
{foo,ii},
mystreams=Streams[];
For[ii=3,ii<=Dimensions[mystreams][[1]],ii++,
Print["Closing",mystreams[[ii]]];
Close[mystreams[[ii]]];
];
];



(* DO ONE *)
doonescaling:=Module[
{foo},
setupscalesolution;
mysigma=1000000000 10^(19/99);
myS=100000000 10^(23/33);
getscalesolution;
];


(* (* DO MANY *)
doallscalingplot;
*)
